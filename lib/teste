import 'package:flutter/material.dart'; // Para componentes do Flutter como MaterialApp, Scaffold, etc.
import 'dart:async'; // Para o uso de Timer.
import 'package:intl/intl.dart'; // Para formatar a hora.

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: LoginScreen(), // Tela de login
    );
  }
}

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  _LoginScreenState createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _formKey = GlobalKey<FormState>(); // Chave para o formulário
  final TextEditingController _emailController = TextEditingController(); // Controller para o campo de Email
  final TextEditingController _senhaController = TextEditingController(); // Controller para o campo de Senha
  bool _obscureText = true; // Para esconder ou mostrar a senha
  bool _isLoading = false; // Para mostrar o carregamento enquanto processa o login
  String _horaAtual = DateFormat('HH:mm').format(DateTime.now()); // Hora atual formatada
  Timer? _timer; // Timer para atualizar a hora a cada segundo

  @override
  void initState() {
    super.initState();
    // Atualiza a hora a cada 1 segundo
    _timer = Timer.periodic(Duration(seconds: 1), (timer) {
      if (mounted) {
        setState(() {
          _horaAtual = DateFormat('HH:mm').format(DateTime.now());
        });
      }
    });
  }

  @override
  void dispose() {
    _timer?.cancel(); // Cancela o timer quando o widget for descartado
    super.dispose();
  }

  // Função para processar o login
  void _login() {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isLoading = true; // Ativa o carregamento
      });

      Future.delayed(Duration(seconds: 2), () {
        setState(() {
          _isLoading = false; // Desativa o carregamento
        });

        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Login realizado com sucesso!')), // Exibe uma mensagem
        );
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final screenSize = MediaQuery.of(context).size; // Tamanho da tela
    final isLandscape = MediaQuery.of(context).orientation == Orientation.landscape; // Verifica se a tela está no modo paisagem
    final isTablet = screenSize.width > 600; // Verifica se o dispositivo é um tablet

    double logoSize = isTablet ? 200 : 150; // Ajusta o tamanho do logo conforme o tipo de dispositivo
    double containerWidth = isTablet ? 400 : 300; // Ajusta a largura do container conforme o tipo de dispositivo

    return Scaffold(
      body: Stack( // Stack para sobrepor widgets
        children: [
          // Container com imagem de fundo e cor azul
          Container(
            decoration: BoxDecoration(
              image: DecorationImage(
                image: AssetImage('assets/imagem.png'), // Caminho da imagem
                fit: BoxFit.cover, // A imagem cobre toda a tela
                colorFilter: ColorFilter.mode(
                  Colors.black.withOpacity(0.4), // A imagem fica com opacidade de 40% (80% escura)
                  BlendMode.darken, // Mescla as cores
                ),
              ),
            ),
          ),
          Container(
            decoration: BoxDecoration(
              color: Color(0xFF9ECBFF).withOpacity(0.30), // Cor azul com opacidade de 30%
            ),
          ),
          SafeArea(
            child: LayoutBuilder(
              builder: (context, constraints) {
                return Column(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    // Status bar
                    Padding(
                      padding: EdgeInsets.all(16),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(_horaAtual, style: TextStyle(color: Colors.black, fontSize: 16)),
                          Row(
                            children: [
                              Icon(Icons.wifi, color: Colors.black, size: 18),
                              SizedBox(width: 5),
                              Icon(Icons.signal_cellular_alt, color: Colors.black, size: 18),
                              SizedBox(width: 5),
                              Icon(Icons.battery_full, color: Colors.black, size: 18),
                            ],
                          ),
                        ],
                      ),
                    ),
                    Expanded(
                      child: Center(
                        child: isLandscape
                            ? Row(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  Padding(
                                    padding: const EdgeInsets.only(right: 40),
                                    child: Image.asset('assets/logo.png', width: logoSize),
                                  ),
                                  LoginContainer(
                                    formKey: _formKey,
                                    emailController: _emailController, // Alterado para emailController
                                    senhaController: _senhaController,
                                    onLogin: _login,
                                    obscureText: _obscureText,
                                    toggleObscureText: () {
                                      setState(() {
                                        _obscureText = !_obscureText;
                                      });
                                    },
                                    isLoading: _isLoading,
                                    containerWidth: containerWidth,
                                  ),
                                ],
                              )
                            : Column(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  Padding(
                                    padding: const EdgeInsets.only(bottom: 40),
                                    child: Image.asset('assets/logo.png', width: logoSize),
                                  ),
                                  LoginContainer(
                                    formKey: _formKey,
                                    emailController: _emailController, // Alterado para emailController
                                    senhaController: _senhaController,
                                    onLogin: _login,
                                    obscureText: _obscureText,
                                    toggleObscureText: () {
                                      setState(() {
                                        _obscureText = !_obscureText;
                                      });
                                    },
                                    isLoading: _isLoading,
                                    containerWidth: containerWidth,
                                  ),
                                ],
                              ),
                      ),
                    ),
                    // Versão do app
                    Padding(
                      padding: EdgeInsets.only(bottom: 20),
                      child: Column(
                        children: [
                          Text("V 1.0.2", style: TextStyle(color: Colors.black, fontSize: 14)),
                          Container(width: 50, height: 2, color: Colors.black),
                        ],
                      ),
                    ),
                  ],
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
class LoginContainer extends StatelessWidget {
  final GlobalKey<FormState> formKey;
  final TextEditingController emailController; // Alterado para email
  final TextEditingController senhaController;
  final VoidCallback onLogin;
  final bool obscureText;
  final VoidCallback toggleObscureText;
  final bool isLoading;
  final double containerWidth;

  const LoginContainer({
    super.key,
    required this.formKey,
    required this.emailController, // Alterado para email
    required this.senhaController,
    required this.onLogin,
    required this.obscureText,
    required this.toggleObscureText,
    required this.isLoading,
    required this.containerWidth,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      width: containerWidth,
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(10),
      ),
      child: Form(
        key: formKey,
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text(
              "Login",
              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 20),
            
            // Campo de Email substituindo o CPF
            TextFormField(
              controller: emailController, // Alterado para email
              decoration: const InputDecoration(
                labelText: "Email", // Alterado para Email
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Digite seu email';
                }
                // Validação simples de email
                String pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$';
                RegExp regExp = RegExp(pattern);
                if (!regExp.hasMatch(value)) {
                  return 'Digite um email válido';
                }
                return null;
              },
            ),
            const SizedBox(height: 10),
            
            // Campo de Senha
            TextFormField(
              controller: senhaController,
              decoration: InputDecoration(
                labelText: "Senha",
                border: OutlineInputBorder(),
                suffixIcon: IconButton(
                  icon: Icon(obscureText ? Icons.visibility : Icons.visibility_off),
                  onPressed: toggleObscureText,
                ),
              ),
              obscureText: obscureText,
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Digite sua senha';
                }
                return null;
              },
            ),
            const SizedBox(height: 20),
            
            // Botão de login ou indicador de carregamento
            isLoading
                ? const CircularProgressIndicator()
                : ElevatedButton(
                    onPressed: onLogin,
                    child: const Text("Entrar"),
                  ),
          ],
        ),
      ),
    );
  }
}
